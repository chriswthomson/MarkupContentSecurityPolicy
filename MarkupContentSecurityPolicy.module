<?php namespace ProcessWire;

/**
 * Markup Content Security Policy
 *
 * #pw-summary Configure and implement a Content Security Policy for all front-end HTML pages.
 *
 * @copyright 2020 NB Communication Ltd
 * @license Mozilla Public License v2.0 http://mozilla.org/MPL/2.0/
 *
 * @property bool $deploy
 * @property string $directiveDefaultSrc
 * @property string $directiveScriptSrc
 * @property string $directiveStyleSrc
 * @property string $directiveImgSrc
 * @property string $directiveConnectSrc
 * @property string $directiveFontSrc
 * @property string $directiveObjectSrc
 * @property string $directiveMediaSrc
 * @property string $directiveManifestSrc
 * @property string $directiveFrameSrc
 * @property string $directiveFormAction
 * @property string $directiveBaseUri
 * @property string $directivesOther
 * @property bool $report
 * @property string $reportExclude
 * @property string $reportEndpoint
 * @property array $reportFiltersSourceFile
 * @property bool $debug
 *
 */

class MarkupContentSecurityPolicy extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {
		return [
			'title' => 'Markup Content Security Policy',
			'version' => 107,
			'summary' => 'Configure and implement a Content Security Policy for all front-end HTML pages.',
			'author' => 'nbcommunication',
			'href' => 'https://github.com/nbcommunication/MarkupContentSecurityPolicy',
			'singular' => true,
			'autoload' => 'template!=admin',
			'icon' => 'lock',
			'requires' => 'ProcessWire>=3.0.123,PHP>=5.6',
		];
	}

	/**
	 * Default Directives
	 *
	 */
	const directives = [
		'default-src',
		'script-src',
		'style-src',
		'img-src',
		'connect-src',
		'font-src',
		'object-src',
		'media-src',
		'manifest-src',
		'frame-src',
		'form-action',
		'base-uri',
	];

	/**
	 * Report Name
	 *
	 */
	const reportName = 'csp-violations';

	/**
	 * The CSP Directives array
	 *
	 * @var array
	 *
	 */
	protected $directives = [];

	/**
	 * Enabled False Positive Filters
	 *
	 * @var array
	 *
	 */
	protected $enabledFilters = [];

	/**
	 * False Positive Filters
	 *
	 * @var array
	 *
	 */
	public $reportFilters = [
		'sourceFile' => [
			'chrome://*',
			'chrome-extension://*',
			'safari-extension://*',
			'blob:{httpHost}/*',
		],
	];

	/**
	 * Initialize the module
	 *
	 */
	public function init() {

		$isAdmin = $this->wire('page')->template == 'admin';

		// Construct the array of directives
		foreach(self::directives as $name) {
			$key = $this->getDirectiveKey($name);
			$value = $this->get($key);
			if($value) $this->directives[$name] = "$name $value";
		}

		// Append any custom directives
		if($this->directivesOther) {
			$this->directives = array_merge($this->directives, explode("\n", $this->directivesOther));
		}

		// Log directives in debug mode when accessing config
		if($isAdmin) $this->logDebug($this->directives, $this->_('Directives'));

		// Customise filters
		foreach($this->reportFilters as $param => $filters) {
			$this->enabledFilters[$param] = [];
			$enabled = $this->get('reportFilters' . ucfirst($param));
			if(!is_array($enabled)) $enabled = [];
			foreach($filters as $key => $value) {
				$value = str_replace('{httpHost}', $this->wire('input')->httpHostUrl(), $value);
				if(in_array($key, $enabled)) $this->enabledFilters[$param][] = $value;
				$this->reportFilters[$param][$key] = $value;
			}

			if(count($this->enabledFilters[$param]) && $isAdmin) {
				// Log enabled filters in debug mode when accessing config
				$this->logDebug($this->enabledFilters[$param], sprintf($this->_('Enabled filters for %s'), '`' . $param . '`'));
			}
		}
	}

	/**
	 * When ProcessWire is ready
	 *
	 */
	public function ready() {

		// CSP violation reporting
		if($this->wire('input')->get->bool(self::reportName)) {

			$report = file_get_contents('php://input');
			if(!empty($report)) {

				$report = json_decode($report, 1);

				// If a valid report has been received
				if(isset($report['documentURI'])) {

					// If filters specified, check and filter
					$filtered = false;
					foreach($this->enabledFilters as $param => $filters) {
						foreach($filters as $filter) {
							if(isset($report[$param])) {
								$pattern = preg_quote($filter);
								$pattern = str_replace('/', '\/', $pattern);
								$pattern = str_replace('*', '.*', $pattern);
								$filtered = (bool) preg_match('/' . $pattern . '/', $report[$param]);
								if($filtered) {
									$this->logDebug($report, sprintf($this->_('Report filtered by %s'), '`' . $filter . '`'));
									break;
								}
							}
						}
					}

					if(!$filtered) {

						// If exclusions are specified, remove them
						if($this->reportExclude) {
							foreach(explode(',', str_replace(' ', '', $this->reportExclude)) as $param) {
								if(isset($report[$param])) {
									$this->logDebug($report[$param], sprintf($this->_('%s removed from report'), '`' . $param . '`'));
									unset($report[$param]);
								}
							}
						}

						// JSON encode and remove newlines from report
						// Remove newlines to preserve accurate log line count
						// Use WireEncodeJSON as there is no need for empty values
						$report = str_replace("\n", '', WireEncodeJSON($report));

						// Log the report
						$this->wire('log')->save(self::reportName, $report, ['url' => $this->wire('page')->url]);

						// Post the report to an endpoint if specified
						if($this->reportEndpoint) {

							$http = $this->wire(new WireHttp());

							if($http->validateURL($this->reportEndpoint)) {
								$response = $http->post($this->reportEndpoint, $report);
								if($response === false) {
									$this->logDebug($http->getError(), sprintf(
										$this->_('Posting report to %s failed'),
										$this->reportEndpoint
									));
								} else {
									$this->logDebug($response, sprintf($this->_('Endpoint Response %d'), $http->getHttpCode()));
								}
							} else {
								$this->logDebug($this->reportEndpoint, $this->_('Endpoint failed URL validation'));
							}
						}

						// Return 204 No Content
						http_response_code(204);
						die();
					}
				}
			}
		}

		// The Content Security Policy should only be used if deployed or the page is loaded by the superuser account
		if(($this->deploy && !$this->debug) || $this->wire('user')->isSuperUser()) {

			// Add the meta tag to HTML pages
			$this->wire->addHookAfter('Page::render', function(HookEvent $event) {

				$page = $event->object;
				$html = $event->return;
				$contentType = $page->template->contentType;

				// If not an html page with a <head> element, return
				if(
					($contentType && $contentType !== 'html') ||
					strpos($html, '</html>') === false ||
					strpos($html, '</head>') === false
				) {
					$this->logDebug(sprintf($this->_('%s is not an HTML page'), $page->url));
					return;
				}

				// Do not append if already deployed
				if(strpos(explode('</head>', $html)[0], 'Content-Security-Policy') !== false) return;

				// Place <meta> inside the <head> before the <title>
				$node = '<title>';
				$event->return = substr_replace($html, $this->renderMeta(true) . "\n\n\t$node", strpos($html, $node), strlen($node));

			}, ['priority' => 199]);
		}
	}

	/**
	 * Render the meta
	 *
	 * @param bool $override
	 * @return string
	 *
	 */
	public function renderMeta($override = false) {
		return ($this->deploy && !$this->debug) || $override ? '<meta http-equiv="Content-Security-Policy" content="' . implode("; ", $this->directives) . '">' .
			($this->report ? "\n\t" . '<script src="' . $this->wire('config')->urls($this) . 'report-uri.js"></script>' . "\n" : '') : '';
	}

	/**
	 * Return the directive's module key from its name
	 *
	 * #pw-internal
	 *
	 * @param string $name
	 * @return string
	 *
	 */
	public function getDirectiveKey($name) {
		return $this->wire('sanitizer')->camelCase("directive-$name");
	}

	/**
	 * Set a directive
	 *
	 * @param string $key The directive name e.g. script-src
	 * @param string $value The value to set
	 * @param bool $append Should the value be appended?
	 * If set to false, the directive will be overwritten (default=true).
	 * @return string The amended directive
	 *
	 */
	public function setDirective($key, $value, $append = true) {
		if(!isset($this->directives[$key]) || !$append) {
			$this->directives[$key] = $value;
		} else {
			$existing = str_replace("$key ", '', $this->directives[$key]);
			if(stripos($existing, $value) === false) $this->directives[$key] = "$key $existing $value";
		}
		return str_replace("$key ", '', $this->directives[$key]);
	}

	/**
	 * Log a debug message
	 *
	 * @param mixed $log
	 * @param string $title
	 * @return bool
	 *
	 */
	protected function logDebug($log, $title = '') {
		return $this->debug ? $this->log(($title ? "$title: " : '') . (is_array($log) ? json_encode($log, 1) : $log)) : false;
	}
}
